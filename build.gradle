plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2019.1.1"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

model {
    components {
        frcUserPhaserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
			binaries.all {
				cppCompiler.args "-Wall", "-Werror", "-std=c++11", "-g", "-DXEROROBORIO"
				lib library: "xerobase", linkage: "static"
				lib library: "xeromisc", linkage: "static"                
				lib library: "xeromath", linkage: "static"                
			}            
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'phaser/src/main/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'phaser/src/main/cpp'
                    include '**/*.h'
                }
                                
            }

            // Defining my dependencies. In this case, WPILibs (+ friends), and vendor libraries.
            useLibrary(it, "wpilib")
            wpi.deps.vendor.cpp(it)
        }  

        frcUserGrondProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
			binaries.all {
				cppCompiler.args "-Wall", "-Werror", "-std=c++11", "-g", "-DXEROROBORIO"
				lib library: "xerobase", linkage: "static"
				lib library: "xeromisc", linkage: "static"                
				lib library: "xeromath", linkage: "static"                
			}            
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'grond/src/main/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'grond/src/main/cpp'
                    include '**/*.h'
                }
                                
            }

            // Defining my dependencies. In this case, WPILibs (+ friends), and vendor libraries.
            useLibrary(it, "wpilib")
            wpi.deps.vendor.cpp(it)
        }

        frcUserBunny2018Program(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
			binaries.all {
				cppCompiler.args "-Wall", "-Werror", "-std=c++11", "-g", "-DXEROROBORIO"
				lib library: "xerobase", linkage: "static"
				lib library: "xeromisc", linkage: "static"                
				lib library: "xeromath", linkage: "static"                
			}            
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'bunny2018/src/main/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'bunny2018/src/main/cpp'
                    include '**/*.h'
                }
                                
            }

            // Defining my dependencies. In this case, WPILibs (+ friends), and vendor libraries.
            useLibrary(it, "wpilib")
            wpi.deps.vendor.cpp(it)
        }        

        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
			binaries.all {
				cppCompiler.args "-Wall", "-Werror", "-std=c++11", "-g", "-DXEROROBORIO"
				lib library: "xerobase", linkage: "static"
				lib library: "xeromisc", linkage: "static"                
				lib library: "xeromath", linkage: "static"                
			}            
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'phoenix/src/main/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'phoenix/src/main/cpp'
                    include '**/*.h'
                }
                                
            }

            // Defining my dependencies. In this case, WPILibs (+ friends), and vendor libraries.
            useLibrary(it, "wpilib")
            wpi.deps.vendor.cpp(it)
        }             

		xeromisc(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
			binaries.all {
				cppCompiler.args "-Wall", "-Werror", "-std=c++11", "-g", "-DXEROROBORIO"
			}
			//binaries.withType(SharedLibraryBinarySpec) {
				//buildable = false
			//}
			sources.cpp {
			    source {
				    srcDirs = ["xeromisc"]
					include "**/*.cpp"
				}
				exportedHeaders {
				    srcDirs = ["xeromisc"]
					include "**/*.h"
				}

				lib library: "xeromath", linkage: "static"
			}
            useLibrary(it, "wpilib")       
            wpi.deps.vendor.cpp(it)                           
		}

		xeromath(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
			binaries.all {
				cppCompiler.args "-Wall", "-Werror", "-std=c++11", "-g", "-DXEROROBORIO"
			}
			//binaries.withType(SharedLibraryBinarySpec) {
				//buildable = false
			//}
			sources.cpp {
			    source {
				    srcDirs = ["xeromath"]
					include "**/*.cpp"
				}
				exportedHeaders {
				    srcDirs = ["xeromath"]
					include "**/*.h"
				}
			}
            wpi.deps.vendor.cpp(it)            
		}        

		xerobase(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
			binaries.all {
				cppCompiler.args "-Wall", "-Werror", "-std=c++11", "-g", "-DXEROROBORIO"
			}
			//binaries.withType(SharedLibraryBinarySpec) {
				//buildable = false
			//}
			sources.cpp {
			    source {
				    srcDirs = ["xerobase"]
					include "**/*.cpp"
				}
				exportedHeaders {
				    srcDirs = ["xerobase"]
					include "*.h", "**/*.h"
				}

				lib library: "xeromath", linkage: "static"
				lib library: "xeromisc", linkage: "static"
			}
            useLibrary(it, "wpilib")
            wpi.deps.vendor.cpp(it)            
		}        
    }

    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            useLibrary(it, "wpilib", "googletest")
            wpi.deps.vendor.cpp(it)
        }
    }
}
