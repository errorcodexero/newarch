BunnyArm
- Add timeout to isdone flag

Drivebase
- Tuning

TubCollector
- Complete subsystem
- Complete actions

XeroBase development
- Complete action/subsystem rework
    Add new actions folder
    Move Action.h to new actions folder
    Adjust all action base classes include path (e.g. Action.h -> actions/Action.h)
    Add isContainer() to Action class as virtual method and return false
    Move DelayAction, DispatchAction, ParallelAction, SequenceAction, 
         TerminateAction, SmartDashboardAction to action folder

    Create ContainerAction class derived from Action class in actions folder
    - Add pure virtual std::list<std::shared_ptr<Action>> getChildren() method
    - Derive ParallelAction, SequenceAction, and TerminateAction from ContainerAction
    - Add isContainer() and return true

    Subsystem class
    - Remove pending_ action
    - Add a parent subsystem to the constructor, adjust all other constructors
            Lifter, Drivebase, Tankdrive, CameraTracker, MessageListener, SingleMotorSubsystem,
            OISubsystem,
    - Create an enum for the return from setAction (e.g. Accepted, Rejected, PreviousCanceled, ParentBusy
    - In subsystem::run()
      o call run on child subsystems
      o set init_def_action false ;
      o if container_action, container_action->run(), if done, set container_action null, action null, init_def_action = true
      o else if action, action->run(), if done, set action null, init_def_action = true
      o else if defaction, if init_def_action, call defaction->start() then call defaction->run()
    - Create isBusyOrParentBusy()
    - Create isBusyOrChildBusy()
    - In subsystem::setAction() remove all the existing code, reset signature to remove force argument
      o if action assigned is container
    - Add selfTest() method with a default empty implementation to Subsystem class
    Drivebase class
    o Create reset() method, set actions to nullptr, set motors to stopped

- Flags manager
  o Create flags class
    Flags::set (will automatically create)
    Flags::reset (will automatically create)
    Flags:exists (returns true if the flag exists)
    Flags:isSet (returns true if exists and set)
    WaitForFlagAction (waits until a flag is set)
  o Attach instance of flags class to Robot
  o Add flags to path following

- Update path manager to also keep track of flags in paths
- Add flags as a final field in the path reader

Automode
- Create straight path length half the field length
- Actual automode
  ParallelAction
    Parallel-1
      TerminateAction(DriveStraight - path, terminator RanseurCameraTracker), set flag bunny at N inches
      DriveByVision (stop at fixed distance or lost target, add fixed distace after lost target?)
      CollectTubAction (includes grab and lift)

    Parallel-2
      WaitForFlag(bunny)
      BunnyArmDeployAction

OI
- Define OI with driveteam (we have a drive team now)
- Bind buttons to phystical OI
- Generate actions based on bound buttons

